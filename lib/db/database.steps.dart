// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    userTasks,
    subTasks,
    timeMeasurements,
    appSettingsTable,
    idxUserTasksStatus,
    idxUserTasksAutoInsertDate,
    idxUserTasksDeletedAt,
    idxUserTasksActiveTimeMeasurementStart,
    idxSubTasksTaskId,
    idxTimeMeasurementsTaskId,
    idxTimeMeasurementsStart,
    idxTimeMeasurementsEnd,
  ];
  late final Shape0 userTasks = Shape0(
      source: i0.VersionedTable(
        entityName: 'user_tasks',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
          _column_13,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 subTasks = Shape1(
      source: i0.VersionedTable(
        entityName: 'sub_tasks',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_14,
          _column_1,
          _column_15,
          _column_16,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 timeMeasurements = Shape2(
      source: i0.VersionedTable(
        entityName: 'time_measurements',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_14,
          _column_17,
          _column_18,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 appSettingsTable = Shape3(
      source: i0.VersionedTable(
        entityName: 'app_settings_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_19,
          _column_20,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index idxUserTasksStatus = i1.Index('idx_user_tasks_status',
      'CREATE INDEX idx_user_tasks_status ON user_tasks (status)');
  final i1.Index idxUserTasksAutoInsertDate = i1.Index(
      'idx_user_tasks_auto_insert_date',
      'CREATE INDEX idx_user_tasks_auto_insert_date ON user_tasks (auto_insert_date)');
  final i1.Index idxUserTasksDeletedAt = i1.Index('idx_user_tasks_deleted_at',
      'CREATE INDEX idx_user_tasks_deleted_at ON user_tasks (deleted_at)');
  final i1.Index idxUserTasksActiveTimeMeasurementStart = i1.Index(
      'idx_user_tasks_active_time_measurement_start',
      'CREATE INDEX idx_user_tasks_active_time_measurement_start ON user_tasks (active_time_measurement_start)');
  final i1.Index idxSubTasksTaskId = i1.Index('idx_sub_tasks_task_id',
      'CREATE INDEX idx_sub_tasks_task_id ON sub_tasks (task_id)');
  final i1.Index idxTimeMeasurementsTaskId = i1.Index(
      'idx_time_measurements_task_id',
      'CREATE INDEX idx_time_measurements_task_id ON time_measurements (task_id)');
  final i1.Index idxTimeMeasurementsStart = i1.Index(
      'idx_time_measurements_start',
      'CREATE INDEX idx_time_measurements_start ON time_measurements (start)');
  final i1.Index idxTimeMeasurementsEnd = i1.Index('idx_time_measurements_end',
      'CREATE INDEX idx_time_measurements_end ON time_measurements ("end")');
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get title =>
      columnsByName['title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get status =>
      columnsByName['status']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get reference =>
      columnsByName['reference']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<double> get progress =>
      columnsByName['progress']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<int> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get updatedByUserAt =>
      columnsByName['updated_by_user_at']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get deletedAt =>
      columnsByName['deleted_at']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get startDate =>
      columnsByName['start_date']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get endDate =>
      columnsByName['end_date']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get autoInsertDate =>
      columnsByName['auto_insert_date']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get activeTimeMeasurementStart =>
      columnsByName['active_time_measurement_start']!
          as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get recurrence =>
      columnsByName['recurrence']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>('title', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>('description', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_3(String aliasedName) =>
    i1.GeneratedColumn<int>('status', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_4(String aliasedName) =>
    i1.GeneratedColumn<int>('reference', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<double> _column_5(String aliasedName) =>
    i1.GeneratedColumn<double>('progress', aliasedName, true,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<int> _column_6(String aliasedName) =>
    i1.GeneratedColumn<int>('created_at', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_7(String aliasedName) =>
    i1.GeneratedColumn<int>('updated_by_user_at', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_8(String aliasedName) =>
    i1.GeneratedColumn<int>('deleted_at', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_9(String aliasedName) =>
    i1.GeneratedColumn<int>('start_date', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_10(String aliasedName) =>
    i1.GeneratedColumn<int>('end_date', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_11(String aliasedName) =>
    i1.GeneratedColumn<int>('auto_insert_date', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_12(String aliasedName) =>
    i1.GeneratedColumn<int>('active_time_measurement_start', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_13(String aliasedName) =>
    i1.GeneratedColumn<String>('recurrence', aliasedName, true,
        type: i1.DriftSqlType.string);

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get taskId =>
      columnsByName['task_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get title =>
      columnsByName['title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get done =>
      columnsByName['done']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<int> get reference =>
      columnsByName['reference']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_14(String aliasedName) =>
    i1.GeneratedColumn<int>('task_id', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES user_tasks (id) ON DELETE CASCADE'));
i1.GeneratedColumn<bool> _column_15(String aliasedName) =>
    i1.GeneratedColumn<bool>('done', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('CHECK ("done" IN (0, 1))'));
i1.GeneratedColumn<int> _column_16(String aliasedName) =>
    i1.GeneratedColumn<int>('reference', aliasedName, false,
        type: i1.DriftSqlType.int);

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get taskId =>
      columnsByName['task_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get start =>
      columnsByName['start']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get end =>
      columnsByName['end']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_17(String aliasedName) =>
    i1.GeneratedColumn<int>('start', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_18(String aliasedName) =>
    i1.GeneratedColumn<int>('end', aliasedName, false,
        type: i1.DriftSqlType.int);

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get brightness =>
      columnsByName['brightness']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get seedColor =>
      columnsByName['seed_color']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_19(String aliasedName) =>
    i1.GeneratedColumn<int>('brightness', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_20(String aliasedName) =>
    i1.GeneratedColumn<int>('seed_color', aliasedName, true,
        type: i1.DriftSqlType.int);
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from1To2: from1To2,
    ));
